1.3常用虚拟机性能监控和故障处理工具
1.3.1 JDK命令行工具
这些命令行工具大多数是tools.jar的一层薄包装，或者unix版本有些是直接通过shell完成的。主要的功能是通过tools.jar中的java代码实现的。

而tools.jar不是jdk的标准api，所以必须在部署应用的时候同时部署tools.jar或者干脆就是运行在Sun的hotspot虚拟机上（或者是购买了jdk源码lincense的虚拟机如BEA JRockit，IBM J9）。这样就可以在应用程序中实现功能强大的监控分析功能。

注意：如果是在jdk1.5上需要在启动时添加参数-Dcom.sun.management.jmxremote开启jmx管理功能。

 

1.       jps虚拟机进程状况工具

功能：列出正在运行的虚拟机进程，本地虚拟机进程的唯一ID（LVMID），以及其执行main函数所在的主类的名称。还可以通过RMI查询开启了RMI服务的远程虚拟机进程状态。

jps option [hostid]

-q   只显示LVMID，省略主类名

-m  显示传递给main函数的参数

-l   显示主类全名，如果执行的是jar包，则显示jar包全路径

-v   显示虚拟机进程启动时的JVM参数

 

2.       jstat  虚拟机统计信息监视工具

可以显示本地和远程虚拟机中的类加载，内存，垃圾收集，JIT编译等运行数据

jstat option vmid [interval s|ms] [count]

如果是远程虚拟机则vmid格式应该是 protocol://lvmid[@hostname:port/servername]

-class             监视类装载，卸载数量，总空间及类装载所耗费的时间

-gc               监视java堆的情况，包括Eden区，2个Survivor区，老年代和永久代的容量，已使用空间，GC合计时间等信息。

-gccapacity          监视java堆的情况，关注java堆中各区域使用的最大最小空间

-gcutil                      监视java堆的情况，主要关注已使用空间占总空间的百分比

-gccause            监视java堆的情况，并会输出导致上一次GC的原因

-gcnew             监视新生代的GC情况

-gcnewcapacity      监视新生代的GC情况，关注使用的最大和最小空间

-gcold             监视老年代GC情况

-gcoldcapacity      监视老年代GC情况，关注最大和最小空间

-gcpermcapacity    输出永久代使用到的最大和最小空间

-complier         输出JIT编译器编译过的方法，耗时等信息

-printcompliation   输出已被JIT编译的方法

 

3.       jinfo  java虚拟机配置信息工具

可以实时的查看和修改虚拟机的配置参数，jdk1.6之后可以通过-flag name=value的方式在运行期修改部分参数。

jinfo option vmid     -flag      查询某个参数的值

 

 

 

4.       jmap java内存映像工具

用于生成堆转储快照，即heapdump文件，还可以查询finalize执行队列，java堆和永久代的详细信息。

jmap option vmid

-dump       生成java堆转储快照 –dump:[live,]format=b,file=<filename>

-finalizerinfo  显示在F-Queue队列中等待finalizer线程执行finalize方法的对象

-heap      显示java堆的详细信息

-histo      显示堆中对象的统计信息

-permstat   以ClassLoader为统计口径显示永久代的内存状态。

-F   强制生成dump快照

 

生成java堆转储快照的其他几种方法：

虚拟机参数-XX:HeapDumpOnOutOfMemoryError  在OutOfMemoryError之后自动生成dump文件。

-XX:HeapDumpOnCtrlBreak 可以使用Ctrl+Break 让虚拟机生成dump文件。

使用kill -3 pid 让虚拟机进程生成dump文件。

 

5.       jhat 虚拟机堆转储快照分析工具

用于分析堆转储快照文件，内置了一个http/html服务器，分析完成后可以通过ie查看分析结果。

加载dump文件一般需要很多内存，所以一般在单独的服务器上进行。每个虚拟机产生的堆栈转储文件的格式有所不同，最好使用对应的分析工具。

Jhat <dumpfilename>

 

6.       jstack java堆栈跟踪工具

用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件），线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是用于定位线程出现长时间停顿的原因。

Jstack option vmid

-F 强制输出线程堆栈

-l  除堆栈外，显示关于锁的附加信息

-m 如果调用了本地方法的话，可以显示c/c++的堆栈

在jdk1.5中Thread类新增了一个getAllStackTraces()方法可以获得虚拟机中所有线程的StackTraceElement对象，从而可以显示线程堆栈信息。

1.3.2 JDK可视化工具
1.       JConsole  Java监视和管理控制台（jconsole.exe）

是基于JMX的可视化管理工具

 

2.       Virtual VM  多合一故障处理工具（jvisualvm.exe）

All-in-one 随JDK发布的功能最强大的虚拟机故障处理工具，他不需要被监视的程序基于特殊的Agent运行，因此对应用程序的实际性能影响很小，可以直接应用在生产环境中。

基于NetBeans平台开发，具备插件扩展功能，可以通过插件扩展其功能

Virtual VM在jdk1.6出现，但是可以向下兼容，需要开启-Dcom.sun.management.jmxremote参数。

注意进行profiling之前最好关闭类共享优化 –Xshare:off

 

3.Eclipse Memory Analyze Tool （MAT）专业分析dump文件的工具

1.4调优案例分析与实战
1.4.1高性能硬件上程序部署策略
策略一：

通过使用64位JDK来使用大内存

(32位jdk windows平台下每个进程的最大内存是2G，考虑到堆以外的开销，堆内存最大为1.5G，unix平台最大内存能到4G)，但是采用这种策略需要将应用程序的full GC频率控制的足够低，例如一天出现一次，这样可以在深夜系统负载小的情况下做full GC让可用空间保持在稳定水平。否则如果使用了大内存，但是系统的fullGC又比较频繁则会导致系统经常性的长时间停顿。

控制full GC的频率就是要大多数对象符合朝生夕灭的原则，不会产生批量的长时间存在的大对象。

这种策略还要考虑到

内存回收会导致长时间停顿（控制频率尽量在夜间发生）

64位jdk性能比32位jdk性能差

要保证应用足够稳定，因为发生堆溢出时无法生成dump文件，或者即使生成也无法分析

相同的程序在64位jdk上消耗内存要比32位jdk大

 

策略二：

使用若干个32位虚拟机建立逻辑集群来利用硬件资源。

在一台物理机器上启动多个服务器进程，给每个服务器进程分配不同的端口，然后在前端搭一个负载均衡器，以为反向代理的方式分配访问请求。

 

1.4.2堆外内存导致的溢出错误
抛出内存溢出时不一定是堆内存溢出，也有可能是堆外内存，所以需要首先判断出是那个内存区溢出。

32位windows平台每个进程最大内存2GB，除了java堆和永久代外还有很多其他区域会占用较多内存，这些内存的总和会受到操作系统最大内存的限制：

Direct Memory 可以通过-XX:MaxDirectMemorySize调整大小（比如大量使用nio就会消耗）

线程堆栈 可以通过-Xss调整大小

Socket缓冲区：每个socket连接都有Receive和send两个缓冲区，分别占37kb和25kb的内存连接数较多时也比较客观，无法分配时会抛出IOException Too Many open files

Jni代码：如果使用JNI调用了本地库，本地库使用的内存也不在堆内存中。

虚拟机和GC：虚拟机和GC代码的执行也要消耗一定内存

 

1.4.3外部系统命令导致系统缓慢
使用java的Runtime.getRuntime().exec()来执行外部系统命令是非常消耗资源的，java虚拟机会克隆一个和当前虚拟机有相同环境变量的进程，然后用这个进程去执行外部命令，然后再退出这个进程，即使外部命令很快完成，频繁调用也会造成cpu和内存的很大负担

 

1.4.4 Eclipse调优实战
-XX:MaxPermSize的默认值是64MB，如果在eclipse启动参数中未指定则可能会造成内存溢出。

--launcher.XXMaxPermSize

256m

Launcher检测到使用的是sun公司的hotspot虚拟机的话会自动将该参数转换成-XX:MaxPermSize传递给jvm。而如果是jdk1.6之后公司变成oracle会识别不出，需要手动指定。

eclipse.ini 文件中所有参数都要配置在 –vmargs 之下

 

调优思路：

1.       先通过Virtual Vm 监控Eclipse启动和运行过程中主要耗时的事件

2.       减少类加载时间

3.       减少编译时间

4.       减少GC发生的次数

5.       提高GC收集的效率（减少响应时间）

 

调优方法：

1.       升级jdk

2.       关闭字节码验证提高类加载速度 –Xverify:none

3.       java源代码编译后生成class文件中保存的是字节码，由字节码解释器解释执行字节码文件的速度要比C/C++编译成的二进制代码要慢。但是虚拟机内置了JIT编译器，如果java方法被调用的次数达到一定程度，会被判定为热点代码，从而会交给JIT编译器编译为本地代码从而提高运行速度。这种运行期动态编译会比c++的静态编译编译出的代码更优秀，所以只要java程序没问题随着代码编译的越来越彻底，运行速度应该越来越快。但是会消耗程序正常运行的时间，即编译时间。在虚拟机运行在client模式时使用的是C1轻量级编译器 ，运行在server模式时使用的C2重量级编译器，所以eclipse如果长时间不关闭的话可以使用server模式

4.       调整GC发生的频率。

根据发生GC的类型和次数调整各内存参数的值

例如内存的自动扩展会造成不必要GC从而降低性能，可以直接将内存固定

-Xms512m –Xmx512m –XX:PermSize=128m –XX:MaxPermSize=128m –Xmn128m

屏蔽掉显示的System.gc()  -XX:+DisableExplicitGC

5.       选择合适的收集器,降低响应延迟

新生代收集器选择ParNew –XX:+UseParNewGC

老年代收集器选择CMS收集器 –XX:+UseConcMarkSweepGC

CMS收集器默认老年代使用了68%就进行收集，可以调高这个临界值以降低fullGC的次数

-XX:CMSInitiatingOccupancyFraction=85

 

1.4.5如何获得和查看GC日志？
-XX:+PrintGCTimeStamps(在标准输出打印GC停顿时间)

-XX:+PrintGCDetails（在标准输出打印gc详细信息）

-verbose:gc（在标准输出打印gc信息）

-Xloggc:gc.log （将gc信息打印到日志文件中）

1.结合-XX:+PrintGCDetails和 -Xloggc:gc.log 就可以将gc的详细信息输出到日志文件中

2. Jstat –gccause vmid 可以查看最近一次GC的原因

3.如何阅读gc日志？

1.4.6如何获得和查看HeapDump？
2.       设置了虚拟机参数-XX:+HeapDumpOnOutOfMemoryError后，在OutOfMemoryError之后自动生成dump文件

3.       设置了虚拟机参数-XX:+HeapDumpOnCtrlBreak 后，可以使用Ctrl+Break 让虚拟机生成dump文件

4.       再unix系统中执行kill -3 pid 让虚拟机进程生成dump文件

5.       使用jdk的命令行工具 jmap –dump:[live,]format=b,file=<filename>

6.       使用jvisualvm工具生成并查看。摘要，类-》实例，OQL控制台（通过OQL语言从堆中查询信息）

7.       使用eclipse memory analyzer tools（mat）工具生成并查看

 

1.4.7如何获得和查看ThreadDump？
1.       什么情况下会自动生成java core 即thread dump？

2.       使用jdk命令行工具 jstack -l vmid

3.       利用jdk1.5中Thread类新增了一个getAllStackTraces()方法可以获得虚拟机中所有线程的StackTraceElement对象，从而可以通过编程的方式显示线程堆栈信息

4.       使用jvisualvm工具生成并查看，主要包含每个线程正在执行的方法堆栈信息和锁相关信息，用于定位线程出现长时间等待的原因。

















