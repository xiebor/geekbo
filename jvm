1.1 JAVA内存区域
1.1.1 Java虚拟机运行时数据区


1.       程序计数器（Program Counter Register）

很小的内存区，是当前线程执行字节码的行号指示器，字节码解释器工作时就是通过改变程序计数器的值来选取下一条需要执行的字节码指令。主要用于在切换cpu时间片时能够让当前线程回到正确的执行位置。这是线程私有的内存区。

如果执行的是java方法，则指向正在执行的字节码指令的地址，如果执行的是native方法，则计数器值为undefined。此内存区不会发生OutOfMemoryError异常。

 

2.       虚拟机栈（VM Stack）

是java方法执行时的内存模型，执行java方法时都会创建栈帧入栈和出栈，用于保存方法的局部变量表，操作栈，动态链接，方法出口等信息。

局部变量表存放了编译期可知的基本数据类型，对象引用和returnAddress类型（指向一条字节码指令的地址），64位长度的long和double会占2个局部变量空间，其他的只占一个。局部变量表的空间是在编译期间完成分配的，运行期间不会改变大小。

此内存区可能会发生StackOverflowError和OutOfMemoryError异常。

是线程私有的内存区。

 

3.       本地方法栈(Native Method Stack)

Native 方法执行时的内存模型，此内存区可能会发生StackOverflowError和OutOfMemoryError异常。Sun 的hotspot虚拟机直接将本地方法栈和虚拟机栈合二为一。

4.       堆内存（heap）

几乎所有对象的实例都是在这里分配内存，是GC管理的主要内存区，所以又叫GC堆，是java虚拟机中最大的一块内存，是线程共享的内存区域，还会进一步划分成多个线程私有的分配缓冲区（TLAB）。

此内存区域可以是物理上不连续的内存区，只要逻辑上连续即可，可以用初始化参数-Xms

和-Xmx参数控制。可能会发生OutOfMemoryError异常。

 

5.       方法区（method area）

用于存放已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。是线程共享的内存区。

此内存区的内存回收的主要目标是针对常量池的回收和类的卸载，通常回收效果比较难以令人满意。可能会发生OutOfMemoryError异常。

 

6.       运行时常量池（runtime constant pool）

是方法区的一部分，用于存放编译期生成的各种字面量和符号引用。也可以在运行期间将新的常量放入池中，比如String的intern()方法。

可能会发生OutOfMemoryError异常。

 

7.       直接内存（Direct Memory）

并不是java虚拟机运行时的数据区的一部分，比如nio，在配置虚拟机参数时需要考虑到直接内存，否则可能会造成总内存超过物理内存从而导致OutOfMemoryError异常。

1.1.2 Java中对象访问的方式
最简单的对象访问也至少会涉及到3个内存区：堆内存区，虚拟机栈，方法区

对象访问的方式通常有两种：

1.  使用句柄方式。

Java堆中会开辟一块内存区，用于存放句柄池。虚拟机栈的局部变量表中的reference中存储的就是对象的句柄地址，而对象句柄中包含了对象实例数据（heap中）和对象类型数据（方法区中）的具体地址信息。这种方式的优点在于reference中存放的是稳定的句柄地址，当对象被移动（垃圾收集时会移动）时，只需要更改句柄的对象实例数据指针，而reference不需要修改。



2.  使用直接指针的方式。

虚拟机栈中的局部变量表中的reference中直接存放的就是对象的地址，而对象实例数据中存放了对象类型数据的指针地址。此种方式的优点在于速度快。节省了一次指针定位的时间开销。



1.1.3 实战OutOfMemoryError异常
在放生OutOfMemoryError异常时需要先根据异常信息判断是哪个内存区发生了内存溢出，然后根据内存区保存的内容判断可能是那种类型的代码导致的内存溢出。同时也要根据dump文件分析，究竟是发生了内存泄漏（没有及时释放内存，或者对象的生存周期太长等），还是发生了内存溢出（虚拟机参数设置过小）。

例如：

Java堆内存溢出

虚拟机参数

-Xms  最小堆内存

-Xmx  最大堆内存

-Xmn  堆内存中新生代的容量

-XX:SurvivorRatio=8  堆内存的新生代中 Eden区和Survivor区的大小比值默认8：1

-XX:+HeapDumpOnOutOfMemoryError  内存溢出时生成堆内存的转储快照文件

 

虚拟机栈和本地方法栈溢出

虚拟机参数

-Xss 栈容量

单线程情况下，无论是栈帧太大，还是虚拟机栈容量太小都会抛出StackOverflowError异常

多线程的情况下，则给每个线程分配的栈空间越大越容易造成内存溢出，所以有时候需要减少每个线程的栈空间已换取更多的线程。

 

方法区和运行时常量池溢出

创建过多的常量或者动态加载过多的类。

虚拟机参数

-XX:PermSize

-XX:MaxPermSize

-Xnoclassgc

-verbose:class

-XX:+TraceClassLoading

-XX:+TraceClassUnLoading

 

本地直接内存溢出

虚拟机参数

-XX:MaxDirectMemorySize   若未指定则缺省和-Xmx一样大

 

内存回收

对于程序计数器，虚拟机栈和本地方法栈3个区域而言是随着线程生而生，随着线程而灭，这几个区域的内存分配和回收都具备确定性，所以不必过多的考虑内存回收。

而java 堆和方法区则需要考虑内存回收。

 

 

 

 

 

 

 

 

 

 

 

 

 

1.2 Java垃圾收集器和内存分配策略
1.2.1判断对象是否存活
1.       引用计数算法

对象有一个引用计数器，当有一个地方引用他时计数器就加1，当引用无效时计数器就减1，任何时刻计数器为0则表示对象不再被使用。此种算法实现简单，判断也比较高效，但是无法解决对象之间相互循环引用的情形，所以java采用的不是引用计数算法来判断对象是否存活。

 

2.       跟搜索算法

以一系列名为GC Roots的对象为起点向下搜索，搜索所经过的路径称为引用链，当一个对象到任何GC Roots没有可用的引用链时（即不可达）表示对象不可用，是可回收的对象。

Java中可作为GC Roots的对象有：

1.       虚拟机栈中的引用对象。（栈帧中的局部变量表中的）

2.       方法区中的类静态属性引用的对象

3.       方法区中的常量引用的对象

4.       本地方法栈中JNI中引用的对象

1.2.2引用的类型
强引用(Strong Reference):

程序代码中普遍存在的引用，只要强引用还存在，垃圾收集器就不会回收掉被引用的对象。

软引用（Soft Reference）:

描述一些还有用，但不是必须的对象，当将要发生内存溢出时，会将这些对象列入回收范围进行二次回收。如果回收之后内存还是不足才会发生内存溢出异常。软引用通过SoftReference类来实现。

软引用是Java 中提供的一种比较适合于缓存场景的应用，采用软引用修改之上的代码

如下：

SoftReference aRef=null;

A a=null;

public void execute(){

if((aRef==null)||(aRef.get()==null)){

a=new A();

aRef=new SoftReference(a);

}

else{

a=aRef.get();

}

// 执行代码

a=null;

}

代码中不同于强引用中的为在execute 方法的最后将a 设置为了null，当execute 方法执

行完毕后，a 对象只有在内存不够用的情况下才会被GC，这对于合理的使用缓存而言无疑

非常有作用，既可以保证不至于大量使用缓存出现OutOfMemory，又可以在内存够用的情

况下提升性能。

 

弱引用（Weak Reference）:

比软引用更弱一点，所关联的对象只能生存到下一次垃圾收集之前，当垃圾收集器工作时，无论当前内存是否充足都会回收掉弱引用相关联的对象。通过WeakReference类实现。

采用弱引用修改之上的代码如下：

WeakReference aRef=null;

A a=null;

public void execute(){

if((aRef==null)||(aRef.get()==null)){

a=new A();

aRef=new WeakReference(a);

}

else{

a=aRef.get();

}

// 执行代码

a=null;

}

对于a 这个引用，在GC 时a 一定会被GC 回收，这种引用有助于GC 更快的回收对象，

尤其是位于集合中的对象，同时也有助于在GC 未回收之前仍然调用此对象来执行一些动作。

虚引用(Phantom Reference):

最弱的一种引用关系，对象是否存在虚引用完全不会对其生存周期产生影响，也无法通过虚引用获得一个对象的实例，唯一的目的就是对象被回收之前会得到一个系统通知。通过PhantomReference类实现

采用虚引用修改之上的代码如下：

ReferenceQueue aRefQueue=new ReferenceQueue();

PhantomReference aRef=null;

A a=null;

public void execute(){

a=new A();

aRef=new PhantomReference(a,aRefQueue);

// 执行代码

a=null;

}

在SoftReference 和WeakReference 中也可以放入ReferenceQueue，这个Queue 是用于

对象在被GC 后用于保存Reference 对象实例的，由于虚引用只是用来得知对象是否被GC，

通过PhantomReference.get 返回的永远是null，因此它要求必须有ReferenceQueue，当上面

代码中的a 对象被GC 后，通过aRefQueue.poll 可以获取到aRef 对象实例，从而可以做一些

需要的动作。

 

在跟搜索算法中对象不可达时，对象还处于“缓刑”期，可以通过对象的finalize()方法进行自我拯救（即和任意一个引用链上的对象关联上即可），但是这个方法只会被垃圾收集器调用一次，即只有一次拯救的机会，但是这个方法运行代价高，不确定性大，不推荐使用这个方法。

1.2.3方法区的垃圾收集
在java虚拟机规范中，方法区的垃圾收集不是必须实现的，并且收集的性价比较低

但并不是说方法区就不存在垃圾收集，主要分为废弃常量的收集和无用类的卸载。

废弃的常量：没有任何地方引用

无用的类：该类的所有实例都被回收，加载该类的ClassLoader也被回收，该类对应的Class对象没有在任何地方被引用

在大量使用反射和动态代理的场景下必须开启类卸载功能以防止方法区溢出。

通过虚拟机参数控制

-Xnoclassgc

-verbose:class

-XX:+TraceClassLoading

-XX:+TraceClassUnLoading

1.2.4垃圾收集算法
1.标记清除算法

首先标记出需要回收的对象，标记完成后统一回收掉被标记的对象。最基础的收集算法，后续的算法都是以此为基础并对其缺点进行改进得到的。

主要缺点：效率低，标记和清除过程都是；会产生大量不连续的内存碎片。

 

2.复制算法

将可用内存按容量分为大小相等的两块，每次只使用其中一块，当着一块内存使用完了则将还存活着的对象复制到另一块内存上，然后再将已使用过的内存一次性的回收掉。这样每次都是对一块内存进行回收，且不存在内存碎片等情况，实现简单运行高效，但是代价是将内存缩小为原来的一半。

一般商业虚拟机都采用这种算法来回收新生代，因为98%的新生代都是朝生夕死，所以不需要1：1的分配内存，而通常是分配为8：1：1，通常只有10%的内存被闲置。但是如果新生代收集后还存活的对象在10%内存中放不下时则会通过分配担保机制直接进入老年代。

 

3.标记整理算法

复制算法在对象存活率较高的情况下效率较低，所以老年代一般不采用这种算法，而采用标记整理算法，标记过程等同于标记清除算法，然后让所有存活对象向一端移动，然后直接清理掉端边界以外的内存。

 

4.分代收集算法

一般的商业虚拟机都采用这种算法，就是根据对象的存活周期将内存划分为几块，一般将java堆分为新生代和老年代。这样可以根据每个年代的特点采用最适当的收集算法。

新生代：对象存活率较低，可以采用复制算法。

老年代：对象存活率高，没有额外空间进行分配担保，一般采用标记整理或者标记清除算法。

1.2.5垃圾收集器
没有最好的收集器，也没有万能的收集器，只有最适合当前应用特点的收集器。



1.       Serial收集器

单线程收集器，只使用一个线程进行垃圾收集工作，并且需要暂停所有其他工作线程，这对于大多数应用来说是难以接受的，但是目前这种暂停没法完全消除。Serial收集器是运行在Client模式下的默认新生代收集器，在单CPU环境中简单而高效。

 

2.       ParNew收集器

是Serial收集器的多线程版本，除了使用多线程进行收集外，其他行为与Serial收集器完全一样。是运行在Server模式下的首选新生代收集器，可以和CMS收集器配合使用。

但是其在单CPU环境中的效果不会比Serial收集器好，只有在CPU数量增加后效果才会明显，默认开启的线程数和CPU数相同，可以通过-XX:ParallelGCThreads来控制垃圾收集的线程数。此收集器是使用了-XX:+UseConcMarkSweepGC选项后的默认新生代收集器，也可以使用-XX:+UseParNewGC来强制使用它。

 

3.       Parallel Scavenge收集器

是新生代收集器，采用复制算法，且也是多线程收集器

但是Paralle Scavenge收集器关注的不是减少用户线程的停顿时间，而是达到一个可控制的吞吐量,即吞吐量=运行用户代码的时间/(运行用户代码的时间+垃圾收集时间).通常也称为吞吐量优先收集器。

停顿时间越短越适合需要与用户交互的程序，可以有很好的响应速度。

吞吐量越高越可以高效的利用CPU的时间，尽快的完成任务，适合在后台运行不需要太多交互的任务。

-XX:MaxGCPauseMillis  用于控制最大垃圾收集停顿时间。

-XX:GCTimeRatio 用于控制垃圾收集时间占总时间的比率，相当于吞吐量的倒数。

-XX:+UseAdaptiveSizePolicy 开启自适应调节策略，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整参数以提供最适合的停顿时间或者最大的吞吐量。

 

4.       Serial Old收集器

是Serial收集器的老年代版本，也是单线程收集器，采用标记整理算法。一般在Client模式下使用。在Server模式下一般和Parallel Scavenge收集器搭配使用或者作为CMS收集器的后备预案。

 

5.       Parallel Old收集器

是Parallel Scavenge收集器的老年代版本，采用多线程和标记整理算法，jdk1.6开始提供，使得吞吐量优先收集器能够有名副其实的组合应用，对于注重吞吐量的场合优先考虑Parallel Scavenge收集器+Parallel Old收集器。-XX:+UseParallelOldGC

 

6.       CMS收集器

以获取最短停顿时间为目标的收集器，采用的是标记清除算法。

收集过程：

1.初始标记：需要暂停用户进程，标记一下GCRoots能直接关联到的对象

2.  并发标记：可与用户进程同时进行，主要是进行GCRoots Tracing过程。

3.  重新标记：需要暂停用户进程，主要是修正并发标记其间由于用户进程导致标记变动的部分

4.  并发清除：可以与用户进程同时工作

主要缺点：

5.       对CPU资源非常敏感，如果CPU数量低于4个，会由于占用过多CPU资源而导致吞吐量降低，导致用户程序的执行速度降低

6.       CMS收集器无法处理浮动垃圾，在并发清理阶段用户进程还在工作所以还会产生垃圾，这部分垃圾产生在标记之后，所以本次收集无法清理，即为浮动垃圾，所以需要预留一定内存空间给用户进程使用，缺省情况下是68%时会激活CMS垃圾收集器，可以通过调整-XX:CMSInitiatingOccupancyFraction参数来提高触发百分比来降低收集次数以提高性能，但是可能会由于内存不足从而在并发清除阶段发生Concurrent Mode Failure失败，从而导致虚拟机启动后备预案采用Serial Old收集器进行老年代的垃圾收集，这样反而会降低性能延长停顿时间。

7.       由于是基于标记清除算法，所以会产生大量内存碎片，从而导致在找不到足够大的连续内存空间时不得不触发Full GC，可以通过-XX:+UseCMSCompactAtFullCollection来控制在FullGC后进行碎片整理。也可以通过-XX:CMSFullGCsBeforeCompaction=来指定多少次Full GC 后才执行整理

 

7.       G1收集器

基于标记整理算法，不会产生空间碎片，可以精确的控制停顿，可以指定在一个M毫秒的时间片段内，消耗在垃圾收集的时间上不超过N毫秒。可以在不牺牲吞吐量的情况下，完成低停顿的内存回收。

G1将整个java堆划分为多个大小固定的独立区域，并跟踪这些区域的垃圾堆积程度，在后台维护一个优先级列表，每次根据允许的收集时间有优先收集垃圾最多的区域。

 

单CPU的应用：Serial +Serial Old

多CPU的服务端应用（注重响应速度）：ParNew+CMS+SerialOld

多CPU的服务端应用（注重吞吐量）：Parallel Scavenge +Parallel Old(jdk1.6之前用Serial Old)

1.2.6内存分配和回收策略
对象内存分配的细节取决于虚拟机参数和当前使用的垃圾收集器组合。

 

1.       对象优先在新生代Eden分配

大多数情况下，对象优先在新生代的Eden分配，当Eden没有足够内存进行分配时，虚拟机会发起一次Minor GC。

 

2.       大对象可直接进入老年代

需要大量连续内存空间的大对象可以直接进入老年代中分配，以避免在新生代的Eden和Survivor区之间发生大量的内存拷贝。可以通过-XX:PretenureSizeThreshold参数设置（xxxB），大于此值的对象就会直接在老年代中分配内存。

 

3.       长期存活的对象将进入老年代

虚拟机对于每个对象都定义了一个年龄计数器Age，如果对象在Eden出生并经历过一次Minor GC后仍然存活，并且能被Survivor容纳的话就会被移动到Survivor中并将年龄加1，当年龄增加到15（默认值）时则会晋升到老年代。可以通过-XX:MaxTenuringThreshold来该变这个默认的阀值。(这个参数只对Serail和ParNew收集器有效，对Parallel Scavenge收集器无效

 

4.       动态对象年龄判断

如果在Survivor中同龄的对象大小总和超过了Survivor空间的50%，则不需要等到MaxTenuringThreshold要求的年龄，所有大于等于该同龄值的对象都可以晋升到老年代。

 

5.       空间分配担保

新生代采用复制收集算法，但为了内存利用率，只使用一个survivor空间作为轮换备份，当出现大量对象在Minor GC后仍然存活的情况就需要老年代进行空间分配担保。让survivor无法容纳的对象直接进入老年代。

为了进行空间分配担保，老年代就要预留足够的空间以容纳这些对象，但是完成内存回收之前会有多少对象存活下来并不能明确知道，所以只好取前一次回收晋升到老年代的对象大小作为经验值与剩余空间进行比较，如果大于则直接进行一次Full GC，如果小于则查看是否允许担保失败，如果允许则只进行minor GC，如果不允许则进行Full GC。

可以通过设置-XX:HandlePromotionFailure来设置是否允许担保失败以避免FullGC过于频繁。

Minor GC：发生在新生代的GC，一般发生比较频繁，速度也较快。

Major GC/Full GC:发生在老年代的GC，速度比Minor GC慢10倍。



垃圾收集的常用参数

UseSerialGC：使用Serial+Serial Old收集器组合进行内存回收，是Client模式下的默认值。

UseParNewGC：使用ParNew+Serial Old收集器组合进行内存回收

UseConcMarkSweepGC:使用ParNew+CMS+Serial Old收集器组合进行内存回收。

UseParallelGC 使用Parallel Scanvenge+Serial Old收集器组合进行收集，是server模式下的默认值。

UserParallelOldGC 使用 Parallel Scanvenge+Parallel Old收集器组合进行内存回收（吞吐量优先）

SurvivorRatio    新生代中Eden和Survivor容量的比值，默认是8 即 8：1

PretenureSizeThreshold  设置直接进入老年代的大对象的大小。

MaxTenuringThreshold  设置晋升如老年代的年龄阀值

UseAdaptiveSizePolicy 设置动态调整java堆中各内存的大小以及进入老年代的年龄

HandlePromotionFailure 设置是否允许分配担保失败

ParallelGCThreads 设置并行GC时的线程数

GCTimeRatio  GC收集时间占总时间的百分比，默认为99

MaxGCPauseMillis 设置最大收集停顿时间。仅在使用Parallel Scanvenge收集器时生效。

CMSInitiatingOccupancyFraction 设置CMS收集器在老年代空间被占用多少百分比后触发垃圾收集，默认是68%.

UseCMSCompactAtFullCollection设置CMS收集器在若干次收集后在启动一次内存碎片整理

CMSFullGCsBeforeCompaction   设置CMS收集器在若干次收集后在启动一次内存碎片整理，并作压缩。
